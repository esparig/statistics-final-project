I have this dataset i want to analyse: This data set measures the running time of a matrix-matrix product A*B = C, where all matrices have size 2048 x 2048, using a parameterizable SGEMM GPU kernel with 241600 possible parameter combinations. For each tested combination, 4 runs were performed and their results are reported as the 4 last columns. All times are measured in milliseconds*. There are 14 parameter, the first 10 are ordinal and can only take up to 4 different powers of two values, and the 4 last variables are binary. Out of 1327104 total parameter combinations, only 241600 are feasible (due to various kernel constraints). This data set contains the results for all these feasible combinations. The experiment was run on a desktop workstation running Ubuntu 16.04 Linux with an Intel Core i5 (3.5GHz), 16GB RAM, and a NVidia Geforce GTX 680 4GB GF580 GTX-1.5GB GPU. We use the 'gemm_fast' kernel from the automatic OpenCL kernel tuning library 'CLTune'. With the following attribute information: Independent variables: 1-2. MWG, NWG: per-matrix 2D tiling at workgroup level: {16, 32, 64, 128} (integer) 3. KWG: inner dimension of 2D tiling at workgroup level: {16, 32} (integer) 4-5. MDIMC, NDIMC: local workgroup size: {8, 16, 32} (integer) 6-7. MDIMA, NDIMB: local memory shape: {8, 16, 32} (integer) 8. KWI: kernel loop unrolling factor: {2, 8} (integer) 9-10. VWM, VWN: per-matrix vector widths for loading and storing: {1, 2, 4, 8} (integer) 11-12. STRM, STRN: enable stride for accessing off-chip memory within a single thread: {0, 1} (categorical) 13-14. SA, SB: per-matrix manual caching of the 2D workgroup tile: {0, 1} (categorical) - Output: 15-18. Run1, Run2, Run3, Run4: performance times in milliseconds for 4 independent runs using the same parameters. They range between 13.25 and 3397.08. I performed some basic analysis using a jupyter notebook. Can you help me with this task?




I wrote the following code:

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load data/sgemm_product.csv dataset into pandas dataframe
sgemm_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data/sgemm_product.csv')

# Print the first 5 rows of the dataframe
sgemm_df.head()

# Get the summary statistics for each parameter
sgemm_df.describe()

# Concatenate the values from the last 4 columns into a single array
values = np.concatenate([sgemm_df['Run1 (ms)'].values, sgemm_df['Run2 (ms)'].values, sgemm_df['Run3 (ms)'].values, sgemm_df['Run4 (ms)'].values])

# Take the logarithm of the values
log_values = np.log(values)

# Create a histogram of the values
plt.hist(log_values, bins=100)

# Set the lower and upper limits of the x-axis
plt.xlim([log_values.min(), log_values.max()])

plt.show()

I suspect this data doesn't follow a normal distribution, so firstly,  I would like to perform an analysis to check the normality (or not) of the distrubution. For that I want to calculate the assimetry coeficients and the curtosis coeficients. Please, could you help me?




I would like to perform the Kolmogorov-Smirnov test and compare my distribution showed in the histogram with the supposed distribution that I would get with my mean and variance (mean= 217.647852, std=368.677309), can you help me?



I performed the following analysis to choose the number of components suitable for my gaussian mixture: from sklearn.mixture import GaussianMixture # Reshape the data to have shape (n_samples, n_features) X = log_values.reshape(-1, 1) # Create a list to store the BIC values for different numbers of components bic_values = [] # Create a list to store the AIC values for different numbers of components aic_values = [] # Try different numbers of components for n_components in range(1, 10): # Create a Gaussian mixture model with n_components gm = GaussianMixture(n_components=n_components) # Fit the model to the data gm.fit(X) # Compute the BIC of the fitted model bic = gm.bic(X) aic = gm.aic(X) # Append the BIC value to the list bic_values.append(bic) aic_values.append(aic) # Plot the BIC values plt.plot(range(1, 10), bic_values) plt.xlabel('Number of components') plt.ylabel('BIC') plt.show() # Plot the AIC values plt.plot(range(1, 10), aic_values) plt.xlabel('Number of components') plt.ylabel('AIC') plt.show(); I'm choosing 7, by visual inspection of the fitting between the model and the histogram. Now I want to check how the model would perform in estimating the output, I'm thinking inusing cross validation, with a k = 5, can you help me with the code?





